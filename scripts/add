#!/usr/bin/python
import errno
import getopt
import mailpie.swishfilter
import os
import sha
import sys
import tempfile
import time

def Open(f):
    if not isinstance(f, str): return f
    if f == "-": return sys.stdin
    return open(f)

def split(mbox):
    mbox = Open(mbox)
    result = []
    for line in mbox:
        if line.startswith("From "):
            if result:
                yield result
            result = []
        result.append(line)
    if result:
        yield result    

def make_dir_once(dir, made=set()):
    if dir in made: return
    try:
        os.makedirs(dir)
    except os.error, detail:
        if detail.errno != errno.EEXIST: raise os.error, detail
    made.add(dir)

def store(base, content):
    sys.stderr.write("."); sys.stderr.flush()
    hash = sha.new(content).hexdigest()
    dir = os.path.join(base, hash[:2])
    file = os.path.join(base, hash[:2], hash[2:])
    if os.path.exists(file):
        print >>sys.stderr, "Duplicate message with hash", hash
        return file, hash
    make_dir_once(dir)
    fd, temp = tempfile.mkstemp(dir=dir)
    os.write(fd, content)
    os.close(fd)
    try:
        os.rename(temp, file)
    except os.error, detail:
        try:
            os.unlink(temp)
        except os.error:
            print >>sys.stderr, "Failed to unlink temporary", temp
            pass
        if detail.errno != errno.EEXIST:
            raise os.error, detail
    return file, hash

def usage(result=0):
    print """mailpie-add: Add messages to a mailpie storage area
Usage: %s [-B dir] [-i|-n] [file ...]
        -B dir: The root directory of the mailpie storage  Default: ~/.mailpie

        -i: Add messages to the index (default)
        -n: Do not add messages to the index 

        file:   Unix mailbox file(s) to add.               Default: stdin
""" % os.path.basename(sys.argv[0])
    raise SystemExit, result

def add(base, mailbox, swish):
    count = 0
    for message in split(mailbox):
        count += 1
        message = "".join(message)
        filename, key = store(base, message)
        if swish:
            swish.do_one(filename, key, message)
    return count

def format_time(s):
    if s < 60: return "%.1fs" % s
    if s < 3600: return "%d:%02.1f" % (int(s/60), s%60)
    return "%d:%02d:%02.1f" % (int(s/3600), int(s/60)%60, s%60)

def main(args):
    try:
        opts, args = getopt.getopt(args, "Bin:h?", ["--help", "--base=", "--index", "--no-index"])
    except getopt.GetoptError, detail:
        usage(detail)

    base = os.path.expanduser("~/.mailpie")
    swish = True

    for k, v in opts:
        if k in ("-?", "-h", "--help"): usage(0)
        if k == "-B": base = v

    if swish: swish = mailpie.swishfilter.Swish(base, True)

    args = args or ["-"]
    count = 0
    start = time.time()
    for filename in args:
        sys.stderr.write(filename)
        count += add(base, filename, swish)
        sys.stderr.write("\n")
    if swish:
        swish.close()
    end = time.time()
    print >>sys.stderr, "Added %d messages in %s (%.1f messages/second)\n" % (count, format_time(end - start), count / (end-start))
if __name__ == '__main__':
    main(sys.argv[1:])
